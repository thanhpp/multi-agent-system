{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Multi-Agent System","n":0.707},"1":{"v":"# Công nghệ tác tử\n\n## Chapter 1 key notes\n- Multi-agent system ![[C1-Introduction#multi-agent-system,1:#*]]\n\n## Chapter 2 key notes\n- Agent ~ Autonomous ~ Making decisions\n  - What to perform?\n  - When to perform?\n\n- Agents\n  - Have attitude\n    - Autonomous\n    - Smart - flexible behaviours\n    - Active\n  - Environment awareness\n  - Operate in a limited domain\n\n- ![[C2-IntelligentAgents#environment-properties,1:#*]]\n\n- Intelligent agents\n  - Reactive\n    - Environment aware\n    - Responds to changes\n  - Pro-active (achieving goals)\n  - Social ability (working with others)\n\n- The behaviour of an agent can be predicted using its intention\n\n- Abstract architecture\n  - World has a finite set of states\n  - Agents have a set of possible actions\n  - A run: a sequence of actions and states\n\n- Notion\n  - Environment: states, initial states, transformer function\n  - Agent: runs -> action\n  - A system: \n    - a pair of an agent & an environment\n    - has a set of possible runs\n    - ![](./assets/images/2021-12-19-17-55-51.png) \n\n- Deliberative vs Purely reactive\n  - Deliberative: Making decisions Reactive agent\n    - Always do the **same thing** in the **same state**\n\n- ![[C2-IntelligentAgents#agents-with-states,1:#*]]\n\n- Utility function:\n  - Rewarding agents\n  - Locality: utility for each state, no long term view\n  - Reinforcement: a discount for states later on\n  - Sequential decision making: Utilities depend on the route\n  - Assign utilities for runs: long term view\n  - Expected utility: run utility * run possibility\n\n- Optimal agents\n  - Maximizes the expected utility (on average)\n  - **Bounded**: only those agents that **can be implemented on machine m**\n\n- Task environment\n  - Predicate task specification: succeeds/fails\n  - A pair: environment, task specification\n    - the system's properties\n    - judging criterias\n  - Judging\n    - Pessimistic: all run must be succeeded\n    - Optimistic: a run is succeeded\n  - The probability of success\n    - Sum of all success runs\n  - Types\n    - Achivement: to the goal\n    - Maintenance: not to fail\n\n## Chapter 3 key notes\n\n- Architecture: modules & interaction between them\n\n- Symbolic Reasoning Agents: Modeling the world using symbols\n\n- Deductive Reasoning Agents:\n  - Theorem proving\n  - Find a possible action by\n    - Prove it works\n    - Prove NotDo(action) can not be proved\n\n- Agent oriented programming: using the intentional notions","n":0.054}}},{"i":2,"$":{"0":{"v":"C3-DeductiveReasoningAgents","n":1},"1":{"v":"\n> Tác tử có khả năng suy luận\n\n# Agent architecture\n- Architecture\n    - A set of software/hardware/modules\n    - Data & control flow (interactions) between modules\n\n- Classes\n    - Symbolic Reasoning Agents\n        - Make decisions via **symbol manipulation**\n        - Agents use explicit logical reasoning\n    - Reactive Agents\n        - Learning\n        - Based on the environment\n    - Hybrid agent\n\n## Symbolic Reasoning Agents\n- A particular type of **knowledge-based system**\n- Deliberative (Có chủ đích) agent\n    - A symbolic model of the world\n    - Makes decisions\n    - Issues\n        - The transduction problem: identifying objects (limited)\n        - The representation problem: represent objects (large amount of information)\n        - Symbol manipulation\n\n## Deductive Reasoning Agents\n- Making decisions based on theorem proving\n- Notations\n    - ![](./assets/images/2021-12-20-10-31-08.png)\n    - Database: internal states\n    - Theory is used to prove\n- [[Agents with States|C2-IntelligentAgents#agents-with-states]]\n    - Next function:\n        - ![](./assets/images/2021-12-20-10-32-42.png)\n    - Action function:\n        - Find an action explicitly **prescribed**\n            - Returns the action if it is proved\n        - Find an action not excluded\n            - ![](./assets/images/2021-12-20-10-38-02.png)\n            - Returns the action if NotDo(action) can not be proved\n- Problems & Solutions\n    - Convert inputs to perceptions (weaken the logic; use symbolic, non-logical representations)\n    - Shift the emphasis of reasoning from run time to **design time**\n\n# Agent oriented programming\n- Keys:\n    - Programming in terms of intentional (chủ đích) notions\n\n## Agent0\n- Agent:\n    - a set of capabilities\n    - a set of initial beliefs\n    - a set of initial commitments\n    - a set of **commitment rules**\n\n- Commitment rule\n    - components\n        - a message condition\n        - a mental condition\n        - an action\n    - paraphrase\n        - if i receive a message from **agent** \n            - Which requests me to do **action** at **time**\n        - I believe that\n            - **agent** is a friend\n            - I **can** do the action\n            - at **time**, I am **not commited** to doing any other action\n        - Then I commit to doing **action** at **time**\n        \n\n- Decision cycle\n    - the message condition => The messages the agent has received\n    - the mental condition => The beliefs of the agent\n    - if the **rule fires**, the agent becomes commited to the action\n\n- Action types\n    - Private\n    - Communicative\n\n- Message types\n    - Requests (commit)\n    - Unrequests (refrain)\n    - Inform (pass the information)\n\n## PLACA\n- Plan and communicate requests for action via **high-level goals**\n- In terms of **mental change rules**\n\n## MetateM\n- Each agent is given a **temporal logic specification** of the behaviour it should exhibit\n- Modal operators: How the truth of propositions changes over time\n    - World = discrete states\n    - 1 single history, a number of possible futures","n":0.049}}},{"i":3,"$":{"0":{"v":"C2-IntelligentAgents","n":1},"1":{"v":"\n- [Autonomy](#autonomy)\n- [Agents and](#agents-and)\n  - [Objects](#objects)\n  - [Expert systems](#expert-systems)\n  - [Intelligent agents and AI](#intelligent-agents-and-ai)\n- [Environment Properties](#environment-properties)\n- [Intelligent agents](#intelligent-agents)\n  - [Reactive (environment aware)](#reactive-environment-aware)\n  - [Pro-active](#pro-active)\n  - [Social ability](#social-ability)\n  - [Other properties](#other-properties)\n- [Intentional System](#intentional-system)\n- [Abstract architecture](#abstract-architecture)\n  - [Environments](#environments)\n  - [Agents](#agents)\n  - [System](#system)\n- [Intelligent agent properties](#intelligent-agent-properties)\n  - [Agents with States](#agents-with-states)\n- [Task for Agents](#task-for-agents)\n  - [Utility functions](#utility-functions)\n  - [Optimal agents](#optimal-agents)\n  - [Task environment](#task-environment)\n\n# Autonomy\n- Tính tự trị\n  - Decisions making\n- Adjustable: Decisions handed to a higher authority when this is benefical\n\n# Agents and\n\n## Objects\n- Agent = object + **attitude**\n  \n- Object:\n  - States\n  - Message passing\n  - Methods (operations that may be performed on this state)\n\n- Attitude\n  - Autonomous: Decide for themselves whether or not to follow other's requests\n  - Smart: Flexible (reactive, pro-active, social) behaviour\n  - Active: each agent has at least 1 thread of active control\n\n## Expert systems\n- Def: \"expertise\" about some (abstract) domain of discourse (bàn luận)\n- Agent is **aware** of the world\n\n## Intelligent agents and AI\n- Agent can be built to operate in **a limited domain**\n- A useful agent is not needed to solve all the AI's problems\n\n# Environment Properties\n- Observable: fully or partially\n  - Fully: The agent can obtain complete, accurate, up-to-date information about the environment's state\n- Deterministic or non-deterministic\n  - Deterministic: Any action has a single **guaranteed effect** (no uncertainty)\n- Static or dynamic\n  - Static: Remain **unchanged** except by the agent's action\n- Discrete or continuous\n  - Discrete: **a fixed, finite number of actions** and percepts in it\n- Episodic or non-episodic\n  - Phân đoạn\n  - Episodic environment\n    - The performance of agent is **dependent on a number of discrete eptisodes**\n    - No linkages between different scenarios\n- Real time\n  - **Time** plays a part in **evaluating** an agents performance\n\n# Intelligent agents\n\n## Reactive (environment aware)\n- Phản ứng nhanh\n- A reactive system is one that\n  - Maintains an ongoing interaction with its environment\n  - **Responds to changes** that occurs in it\n\n## Pro-active\n- Chuyên nghiệp\n- Generating and attempting to achieve goals\n\n## Social ability\n- Taking **others** into account\n- Cooperation: working **together** to achieve a **shared goal**\n- Coordination: Managing the **interdependencies** between activities (sharing resources)\n- Negotiation: To reach **agreements** on matters of **common interest**\n  - Offer\n  - Counter offer\n\n## Other properties\n- Mobility: moving\n- Rationality (hợp lý): Act to achieve goals\n- Veracity (xác thực): know the communication failures\n- Benevolence (nhân từ): to help or not to help\n- Learning/Adaption\n\n# Intentional System\n- Folk psychology:\n  - **Human behaviour is predicted** and explainend through the attribution of **attitudes**.\n  - Attitudes = intentional notions\n\n# Abstract architecture\n- The world \n  - Finite set E of discrete, instantaneous (tức thời) **states** \n    - ![](./assets/images/2021-12-19-17-09-25.png)\n- Agents have a set of **possible actions** to transform the state of the world\n  - ![](./assets/images/2021-12-19-17-10-59.png)\n- A **run** of an agent is a **sequence** of interleaved (xen kẽ) _world states and actions_\n  - ![](./assets/images/2021-12-19-17-12-45.png)  \n  - Runs can end with a state or an action\n    - ![](./assets/images/2021-12-19-17-21-18.png)\n\n## Environments\n- Properties\n  - History dependent\n  - Non-determistic\n- State transformer function: environment's behaviour\n  - ![](./assets/images/2021-12-19-17-24-49.png)\n- ![](./assets/images/2021-12-19-17-45-14.png)\n  - E: set of states\n  - e[0]: initial state\n  - T: state transformer function\n\n## Agents\n- ![](./assets/images/2021-12-19-17-47-19.png)\n  - Agent = function which maps **runs to actions**\n  - Ag: the set of all agents\n\n## System\n- ![](./assets/images/2021-12-19-17-49-38.png)\n- A system = an agent + an environment\n- Associate with a set of **possible runs**\n- ![](./assets/images/2021-12-19-17-55-43.png)\n\n# Intelligent agent properties\n- Deliberative (chủ ý): Agent will reach a **different decision** when it reach the **same state** by **different routes** \n- Purely reactive\n  - Without history references\n  - ![](./assets/images/2021-12-19-18-00-52.png) (state to actions)\n  - Reactive agent\n    - Always do the **same thing** in the **same state**\n\n## Agents with States\n- ![](./assets/images/2021-12-19-22-43-54.png)\n- Agent's internal **data structure**\n  - Record information about the environment state & history\n- **See**: observe the environment\n  - ![](./assets/images/2021-12-19-22-44-54.png)\n  - Output is a percept (nhận thức)\n- **Action**: decision making\n  - ![](./assets/images/2021-12-19-22-48-24.png)\n  - Internal states -> actions\n- **Next**: \n  - ![](./assets/images/2021-12-19-22-51-50.png)\n  - Internal States + percept => new internal states\n  - **Updates** the agent's view when it gets a **new percept**\n\n# Task for Agents\n\n## Utility functions\n- **Rewarding** agent with the state it brings out\n- A task specification\n  - A real number (reward) with every environment state\n  - ![](./assets/images/2021-12-19-22-56-27.png)\n- Local utility functions\n  - Assigning utilities to **individual states**\n  - Difficult to specify a **long term view**\n  - **Reinforcement** learning: A **discount** for states later on\n- Sequential decision making\n  - Utility gained depends on the route taken\n- Utilities over Runs\n  - ![](./assets/images/2021-12-19-23-01-28.png)\n  - Assign utility for runs\n- Expected utility\n  - Probality that run _r_ occurs when agent _Ag_ is placed in the enviroment _Env_\n    - ![](./assets/images/2021-12-19-23-04-15.png)\n  - ![](./assets/images/2021-12-19-23-04-50.png)\n    - Utility of each run\n    - Possibility of each run\n\n## Optimal agents\n- Maximizes expected utility\n  - ![](./assets/images/2021-12-19-23-08-11.png)\n- Do the best **on average**\n- Bounded optimal agents\n  - Some agents **can not be implemented**\n  - Include only those agents tthat can be implemented on **machine m**\n    - ![](./assets/images/2021-12-19-23-11-13.png)\n  - ![](./assets/images/2021-12-19-23-10-54.png)\n\n## Task environment\n- Predicate task specification: Assign 0/1 (true/false | succeed/failed) to a run\n  - ![](./assets/images/2021-12-19-23-13-26.png)\n- Task environment:\n  - A pair ![](./assets/images/2021-12-19-23-14-41.png)\n    - ![](./assets/images/2021-12-19-23-14-17.png)\n    - Environment\n    - Task specification\n  - Specifies\n    - The properties of [the system](#system) the agent will inhabit (occupy)\n    - The **criteria** by which an agent will be **judged**\n- A set of runs of agent _Ag_ in environment _Env_ that satisfy _$\\psi$_\n  - ![](./assets/images/2021-12-19-23-23-52.png) \n  - Agent _Ag_ succeeds in task environment $<Env, \\psi>$\n    - ![](./assets/images/2021-12-19-23-27-12.png)\n    - An agent succeeds if **every run satisfies the specification of the agent**\n      - ![](./assets/images/2021-12-19-23-29-32.png)\n    - More optimistic: succeed = at least a successful run\n      - ![](./assets/images/2021-12-19-23-29-18.png)\n- The probability of success\n  - Non-deterministic: the state transform function returns **a set of possible states**\n  - ![](./assets/images/2021-12-19-23-34-14.png)\n    - The sum of probabilities of every run that satisfy $\\psi$ when agent _Ag_ is placed in environment _Env_\n- Types\n  - Achievement: if the agent can **force the environment** into one of the goal states\n  - Maintenance: if the agent **never forced into** one of the fail states","n":0.032}}},{"i":4,"$":{"0":{"v":"C1-Introduction","n":1},"1":{"v":"\n- [5 Trends](#5-trends)\n  - [Ubiquity - Ubiquitous](#ubiquity---ubiquitous)\n  - [Interconnection](#interconnection)\n  - [Intelligence](#intelligence)\n  - [Delegation](#delegation)\n  - [Human oriented](#human-oriented)\n  - [Other trends](#other-trends)\n- [Agents](#agents)\n  - [Definition](#definition)\n  - [Multi-Agent System](#multi-agent-system)\n  - [Design problems](#design-problems)\n\n# 5 Trends\n\n## Ubiquity - Ubiquitous\n- Khắp nơi - Phổ cập\n- Processor is embedded into things\n\n\n## Interconnection\n- Kết nối\n- Distributed system, networked\n\n## Intelligence\n- Thông minh\n- Computers can complete complex tasks\n- Automated\n\n## Delegation\n- Ủy thác\n- Without human intervention (can thiệp)\n\n## Human oriented\n- Hướng tới con người\n- Reflect the way we ourselves understand the world\n- Higher level of abstraction\n\n## Other trends\n- Grid/Cloud: \n  - Massive-scale open distributed system\n  - Solve large computational problems\n  - Grid -> focus on the middleware\n\n- The Semantic web:\n  - Sematic markup\n  - Contents are specified for each user\n  - Richer, more meaningful services\n\n# Agents\n\n## Definition\n- A computer system\n  - Can perform independent action (**autonomous**)\n  - On behalf of its user\n\n## Multi-Agent System\n- Consists of **a number of agents**\n  - Each agent has different goal and motivation\n  - Ability to cooperate, coordinate, negotiate\n\n## Design problems\n- Agent: How to build independent agents to compelete delegated tasks ?\n- Society: Interaction between agents?","n":0.075}}}]}
